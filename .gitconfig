[alias]
	# View abbreviated SHA, description, and history graph of the latest 20 commits
	#l = log --pretty=oneline -n 20 --graph --abbrev-commit
	# View the current working tree status using the short format
	#s = status -s
	# Show the diff between the latest commit and the current state
	#d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"
	# `git di $number` shows the diff between the state `$number` revisions ago and the current state
	#di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"
	# Pull in remote changes for the current repository and all its submodules
	#p = !"git pull; git submodule foreach git pull origin master"
	# Clone a repository including all submodules
	#c = clone --recursive
	# Commit all changes
	#ca = !git add -A && git commit -av
	# Switch to a branch, creating it if necessary
	#go = checkout -B
	# Show verbose output about tags, branches or remotes
	#tags = tag -l
	#branches = branch -a
	#remotes = remote -v
	# Credit an author on the latest commit
	#credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"
	# Interactive rebase with the given number of latest commits
	#reb = "!r() { git rebase -i HEAD~$1; }; r"
	up = !git pull upstream master
	lg = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'

[apply]
	# Detect whitespace errors when applying a patch
	whitespace = fix

[branch]
	autosetuprebase = remote

[color]
	sh = auto
	ui = auto

[core]
	autocrlf = input

[fetch]
	prune = true

[pull]
	rebase = preserve

[push]
	default = upstream

[rerere]
	enabled = true
	autoupdate = true

# URL shorthands
[url "git@github.com:"]
	insteadOf = "gh:"
	pushInsteadOf = "github:"
	pushInsteadOf = "git://github.com/"
[url "git://github.com/"]
	insteadOf = "github:"
[url "git@gist.github.com:"]
	insteadOf = "gst:"
	pushInsteadOf = "gist:"
	pushInsteadOf = "git://gist.github.com/"
[url "git://gist.github.com/"]
	insteadOf = "gist:"

[branch "master"]
    # This is the list of cmdline options that should be added to git-merge
    # when I merge commits into the master branch.
    #
    # First off, the option --no-commit instructs git not to commit the merge
    # by default. This allows me to do some final adjustment to the commit log
    # message before it gets commited. I often use this to add extra info to
    # the merge message or rewrite my local branch names in the commit message
    # to branch names sensible to the casual reader of the git log.
    #
    # Option --no-ff instructs git to always record a merge commit, even if
    # the branch being merged into can be fast-forwarded. This is often the
    # case when you create a short-lived topic branch which tracks master, do
    # some changes on the topic branch and then merge the changes into the
    # master which remained unchanged while you were doing your work on the
    # topic branch. In this case the master branch can be fast-forwarded (that
    # is the tip of the master branch can be updated to point to the tip of
    # the topic branch) and this is what git does by default. With --no-ff
    # option set git creates a real merge commit which records the fact that
    # another branch was merged. I find this easier to understand and read in
    # the log.
    #mergeoptions = --no-commit --no-ff
